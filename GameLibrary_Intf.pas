unit GameLibrary_Intf;

// ----------------------------------------------------------------------
//  This file was automatically generated by Remoting SDK from a
//  RODL file downloaded from a server or associated with this project.
//
//  Do not modify this file manually, or your changes will be lost when
//  it is regenerated the next time you update your RODL.
// ----------------------------------------------------------------------

{$I RemObjects.inc}

interface

uses
  {$IFDEF DELPHIXE2UP}System.SysUtils{$ELSE}SysUtils{$ENDIF},
  {$IFDEF DELPHIXE2UP}System.Classes{$ELSE}Classes{$ENDIF},
  {$IFDEF DELPHIXE2UP}System.TypInfo{$ELSE}TypInfo{$ENDIF},
  uROEncoding,
  uROUri,
  uROProxy,
  uROExceptions,
  uROXMLIntf,
  uROClasses,
  uROTypes,
  uROClientIntf,
  uROAsync,
  uROEventReceiver;

const LibraryUID: String = '{E537A991-318B-4034-B7C1-34490FA83689}';
const DefaultNamespace: String = 'GameLibrary';
const TargetNamespace: String = 'GameLibrary';
const IGameService_IID: TGUID = '{DB641BC0-1691-41EF-948A-27D3D08CCF8A}';
type
  { Forward declarations }
  IGameService = interface;
  IGameService_Async = interface;
  IGameService_AsyncEx = interface;
  CoGameService = class;
  CoGameService_Async = class;
  CoGameService_AsyncEx = class;
  TGameService_Proxy = class;
  TGameService_AsyncProxy = class;
  TGameService_AsyncProxyEx = class;

  IGameService = interface(IROService)
  ['{DB641BC0-1691-41EF-948A-27D3D08CCF8A}']
    function Helloworld: UnicodeString;
  end;

  IGameService_Async = interface(IROAsyncInterface)
    procedure Invoke_Helloworld;
    function Retrieve_Helloworld: UnicodeString;
  end;

  IGameService_AsyncEx = interface(IROAsyncInterfaceEx)
    function BeginHelloworld(const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function EndHelloworld(const aRequest: IROAsyncRequest): UnicodeString;
  end;

  CoGameService = class(System.TObject)
  public
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IGameService; overload;
    class function Create(const aUri: TROUri; aDefaultNamespaces: String = ''): IGameService; overload;
    class function Create(const aUrl: String; aDefaultNamespaces: String = ''): IGameService; overload;
  end;

  CoGameService_Async = class(System.TObject)
  public
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IGameService_Async; overload;
    class function Create(const aUri: TROUri; aDefaultNamespaces: String = ''): IGameService_Async; overload;
    class function Create(const aUrl: String; aDefaultNamespaces: String = ''): IGameService_Async; overload;
  end;

  CoGameService_AsyncEx = class(System.TObject)
  public
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IGameService_AsyncEx; overload;
    class function Create(const aUri: TROUri; aDefaultNamespaces: String = ''): IGameService_AsyncEx; overload;
    class function Create(const aUrl: String; aDefaultNamespaces: String = ''): IGameService_AsyncEx; overload;
  end;

  TGameService_Proxy = class(TROProxy, IGameService)
  protected
    function __GetInterfaceName: String; override;
    function Helloworld: UnicodeString;
  end;

  TGameService_AsyncProxy = class(TROAsyncProxy, IGameService_Async)
  protected
    function __GetInterfaceName: String; override;
    procedure Invoke_Helloworld;
    function Retrieve_Helloworld: UnicodeString;
  end;

  TGameService_AsyncProxyEx = class(TROAsyncProxyEx, IGameService_AsyncEx)
  protected
    function __GetInterfaceName: String; override;
    function BeginHelloworld(const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function EndHelloworld(const aRequest: IROAsyncRequest): UnicodeString;
  end;

function DefaultNamespaces: String;
implementation

uses
  uROSystem,
  uROSerializer,
  uROClient,
  uROTransportChannel,
  uRORes;

function DefaultNamespaces: String;
var
  lres: String;
begin
  lres := DefaultNamespace;
  result := lres;
  exit;
end;

type
  { Forward declarations }
  TMyTransportChannel = class;

  TMyTransportChannel = class(TROTransportChannel)
  end;

class function CoGameService.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IGameService;
begin
  result := TGameService_Proxy.Create(aMessage, aTransportChannel);
  exit;
end;

class function CoGameService.Create(const aUri: TROUri; aDefaultNamespaces: String = ''): IGameService;
begin
  result := TGameService_Proxy.Create(aUri, aDefaultNamespaces);
  exit;
end;

class function CoGameService.Create(const aUrl: String; aDefaultNamespaces: String = ''): IGameService;
begin
  result := TGameService_Proxy.Create(aUrl, aDefaultNamespaces);
  exit;
end;

class function CoGameService_Async.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IGameService_Async;
begin
  result := TGameService_AsyncProxy.Create(aMessage, aTransportChannel);
  exit;
end;

class function CoGameService_Async.Create(const aUri: TROUri; aDefaultNamespaces: String = ''): IGameService_Async;
begin
  result := TGameService_AsyncProxy.Create(aUri, aDefaultNamespaces);
  exit;
end;

class function CoGameService_Async.Create(const aUrl: String; aDefaultNamespaces: String = ''): IGameService_Async;
begin
  result := TGameService_AsyncProxy.Create(aUrl, aDefaultNamespaces);
  exit;
end;

class function CoGameService_AsyncEx.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IGameService_AsyncEx;
begin
  result := TGameService_AsyncProxyEx.Create(aMessage, aTransportChannel);
  exit;
end;

class function CoGameService_AsyncEx.Create(const aUri: TROUri; aDefaultNamespaces: String = ''): IGameService_AsyncEx;
begin
  result := TGameService_AsyncProxyEx.Create(aUri, aDefaultNamespaces);
  exit;
end;

class function CoGameService_AsyncEx.Create(const aUrl: String; aDefaultNamespaces: String = ''): IGameService_AsyncEx;
begin
  result := TGameService_AsyncProxyEx.Create(aUrl, aDefaultNamespaces);
  exit;
end;

function TGameService_Proxy.__GetInterfaceName: String;
begin
  result := 'GameService';
  exit;
end;

function TGameService_Proxy.Helloworld: UnicodeString;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: UnicodeString;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'GameLibrary', __InterfaceName, 'Helloworld');
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(UnicodeString), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TGameService_AsyncProxy.__GetInterfaceName: String;
begin
  result := 'GameService';
  exit;
end;

procedure TGameService_AsyncProxy.Invoke_Helloworld;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('Helloworld');

    lMessage.InitializeRequestMessage(lTransportChannel, 'GameLibrary', __InterfaceName, 'Helloworld');
    __DispatchAsyncRequest('Helloworld', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TGameService_AsyncProxy.Retrieve_Helloworld: UnicodeString;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: UnicodeString;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('Helloworld');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(UnicodeString), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        FreeOrDisposeOf(__response);
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TGameService_AsyncProxyEx.__GetInterfaceName: String;
begin
  result := 'GameService';
  exit;
end;

function TGameService_AsyncProxyEx.BeginHelloworld(const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'GameLibrary', __InterfaceName, 'Helloworld');
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TGameService_AsyncProxyEx.EndHelloworld(const aRequest: IROAsyncRequest): UnicodeString;
var
  lResult: UnicodeString;
begin
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(UnicodeString), lResult, []);
  result := lResult;
  exit;
end;

initialization
  RegisterProxyClass(IGameService_IID, TGameService_Proxy);
finalization
  UnregisterProxyClass(IGameService_IID);
end.

